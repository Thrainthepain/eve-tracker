version: '3.9'

services:
  mongodb:
    image: mongo:latest
    container_name: eve-tracker-mongodb
    volumes:
      - mongo_data:/data/db
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME:-root}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD:-password}
      TZ: UTC
    networks:
      - eve-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "'db.runCommand(\"ping\").ok'", ">/dev/null"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: eve-tracker-backend
    restart: unless-stopped
    depends_on:
      mongodb:
        condition: service_healthy
    environment:
      PORT: ${PORT:-5000}
      MONGO_URI: ${MONGO_URI}
      CLIENT_URL: ${CLIENT_URL:-http://localhost}
      SERVER_URL: ${SERVER_URL:-http://localhost:5000}
      EVE_CLIENT_ID: ${EVE_CLIENT_ID}
      EVE_CLIENT_SECRET: ${EVE_CLIENT_SECRET}
      SESSION_SECRET: ${SESSION_SECRET}
      NODE_ENV: ${NODE_ENV:-production}
      WEBSITE_NAME: ${WEBSITE_NAME}
      TZ: UTC
    ports:
      - "${BACKEND_PORT:-5000}:${PORT:-5000}"
    volumes:
      - ./logs:/app/logs:rw
      - ./backups:/app/backups:rw
      - ./uploads:/app/uploads:rw
    networks:
      - eve-network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:${PORT:-5000}/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  frontend:
    build:
      context: .
      dockerfile: client/Dockerfile
    container_name: eve-tracker-frontend
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    environment:
      SERVER_PROTOCOL: ${SERVER_PROTOCOL:-http}
      FULL_DOMAIN: ${FULL_DOMAIN:-localhost}
      BACKEND_PORT: ${BACKEND_PORT:-5000}
      SSL_MODE: ${SSL_MODE:-skip}
      TZ: UTC
    ports:
      - "${FRONTEND_PORT:-80}:80"
      - "443:443"
    networks:
      - eve-network
    volumes:
      - ./client/public:/usr/share/nginx/html/custom-assets:ro
      - ./nginx.conf:/etc/nginx/templates/default.conf.template:ro
      - ssl_certs:/etc/nginx/ssl:rw
      - ./certbot/www:/var/www/certbot:ro
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s

  certbot:
    image: certbot/certbot:latest
    container_name: eve-tracker-certbot
    profiles: ["ssl"]
    environment:
      SSL_MODE: ${SSL_MODE:-skip}
      LETSENCRYPT_EMAIL: ${LETSENCRYPT_EMAIL:-admin@example.com}
      DOMAIN: ${FULL_DOMAIN:-localhost}
    volumes:
      - ssl_certs:/etc/letsencrypt:rw
      - ./certbot/www:/var/www/certbot:rw
    command: >
      sh -c "if [ \"$${SSL_MODE}\" = \"letsencrypt\" ]; then 
              certbot certonly --webroot -w /var/www/certbot --email $${LETSENCRYPT_EMAIL} --agree-tos --no-eff-email -d $${DOMAIN} || echo \"SSL setup failed or not needed\"; 
            else 
              echo \"SSL not configured for automatic setup\"; 
            fi"
    depends_on:
      frontend:
        condition: service_started

networks:
  eve-network:
    driver: bridge
    name: eve-network

volumes:
  mongo_data:
    name: eve-tracker-mongodb-data
  ssl_certs:
    name: eve-tracker-ssl-certs